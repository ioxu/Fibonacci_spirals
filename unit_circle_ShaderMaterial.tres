[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_disabled,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : hint_color;
uniform vec4 albedo_back : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float roughness_back : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;


void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
}




void fragment() {
	vec2 base_uv = UV;
	if(FRONT_FACING){
		vec4 albedo_tex = texture(texture_albedo,base_uv);
		//albedo_tex *= COLOR;
		ALBEDO = albedo.rgb * albedo_tex.rgb;
		ROUGHNESS = roughness;
		EMISSION = ALBEDO * 6.0f;
	}else{
		ALBEDO = albedo_back.rgb;
		ROUGHNESS = roughness_back;
		EMISSION = ALBEDO * 6.0f;
	}

	METALLIC = metallic;
	SPECULAR = specular;
}

"

[resource]
shader = SubResource( 1 )
shader_param/albedo = Color( 0.890625, 0.285278, 0.222656, 1 )
shader_param/albedo_back = Color( 0.0784314, 0.113725, 0.360784, 1 )
shader_param/specular = 0.5
shader_param/metallic = 0.0
shader_param/roughness = 0.179
shader_param/roughness_back = 0.56
shader_param/point_size = 1.0
shader_param/uv1_scale = Vector3( 1, 1, 1 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/uv2_scale = Vector3( 1, 1, 1 )
shader_param/uv2_offset = Vector3( 0, 0, 0 )
